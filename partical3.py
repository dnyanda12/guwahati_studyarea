# -*- coding: utf-8 -*-
"""partical3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fQBQiaWPAa2O1VKAbXokyXx34z5UMK_n
"""

pip install geemap

pip install geemap[all]

pip install geemap[lidar]

pip install geemap[raster]

pip install geemap[sql]

pip install geemap[vector]

pip install geemap[streamlit]

import geemap.geemap as map

import ee

ee.Authenticate()

ee.Initialize(project='ee-dnyandagawathe24')

m=map.Map()
m

India = ee.FeatureCollection('projects/ee-dnyandagawathe24/assets/India_state')
India

India_Districts = ee.FeatureCollection('projects/ee-dnyandagawathe24/assets/Indian_district')
m.addLayer(India_Districts,{},'India_Districts') #dislpaying the shapefile in the interactive map
m

DEHRADUN = India_Districts.filter(ee.Filter.eq('District','DEHRAD@N'))
m.addLayer(DEHRADUN, {},'DEHRAD@N')
m

NDVI2024 = ee.ImageCollection("LANDSAT/COMPOSITES/C02/T1_L2_8DAY_NDVI").select('NDVI').filterDate('2024-01-01', '2024-12-31') # Corrected the end date to '2024-12-31'
DEHRADUNNDVI_2024 = NDVI2024.mean().clip(DEHRADUN)
NDVI = {'min':0, 'max':1, 'palette': ['ffffff', 'ce7e45', 'df923d', 'f1b555', 'fcd163', '99b718', '74a901',
    '66a000', '529400', '3e8601', '207401', '056201', '004c00', '023b01',
    '012e01', '011d01', '011301']}
m.addLayer(DEHRADUNNDVI_2024, NDVI, 'NDVI_2024')
m

import os

""" #dislpaying the shapefile in the interactive map

"""

export_task = ee.batch.Export.image.toDrive(
    image=NDVI2024,
    description='NDVI2024',
    folder='EarthEngine',
    fileNamePrefix='NDVI2024',
    region=DEHRADUN.geometry().bounds().getInfo()['coordinates'],
    scale=30,  # Adjust the scale as needed
    maxPixels=1e13
)
export_task.start()

NDVI2014 = ee.ImageCollection("LANDSAT/COMPOSITES/C02/T1_L2_8DAY_NDVI").select('NDVI').filterDate('2014-01-01', '2014-12-31')
DEHRADUNNDVI_2014 = NDVI2014.mean().clip(DEHRADUN)
DEHRADUNNDVI_2014 = DEHRADUNNDVI_2014.updateMask(DEHRADUNNDVI_2014.gt(0))
NDVI = {'min':0, 'max':1, 'palette': ['ffffff', 'ce7e45', 'df923d', 'f1b555', 'fcd163', '99b718', '74a901',
    '66a000', '529400', '3e8601', '207401', '056201', '004c00', '023b01',
    '012e01', '011d01', '011301']}
m.addLayer(DEHRADUNNDVI_2014, NDVI, 'NDVI_2014')
m

export_task = ee.batch.Export.image.toDrive(
    image=NDVI2014,
    description='NDVI2014',
    folder='EarthEngine',
    fileNamePrefix='NDVI2014',
    region=DEHRADUN.geometry().bounds().getInfo()['coordinates'],
    scale=30,  # Adjust the scale as needed
    maxPixels=1e13
)
export_task.start()

NDVI2004 = ee.ImageCollection("LANDSAT/COMPOSITES/C02/T1_L2_8DAY_NDVI").select('NDVI').filterDate('2004-01-01', '2004-12-31')
DEHRADUNNDVI_2004 = NDVI2004.mean().clip(DEHRADUN)
DEHRADUNNDVI_2004 = DEHRADUNNDVI_2004.updateMask(DEHRADUNNDVI_2004.gt(0))
NDVI = {'min':0, 'max':1, 'palette': ['ffffff', 'ce7e45', 'df923d', 'f1b555', 'fcd163', '99b718', '74a901',
    '66a000', '529400', '3e8601', '207401', '056201', '004c00', '023b01',
    '012e01', '011d01', '011301']}
m.addLayer(DEHRADUNNDVI_2004, NDVI, 'NDVI_2004')
m

export_task = ee.batch.Export.image.toDrive(
    image=NDVI2004,
    description='NDVI2004',
    folder='EarthEngine',
    fileNamePrefix='NDVI2004',
    region=DEHRADUN.geometry().bounds().getInfo()['coordinates'],
    scale=30,  # Adjust the scale as needed
    maxPixels=1e13
)
export_task.start()

NDVI1994 = ee.ImageCollection("LANDSAT/COMPOSITES/C02/T1_L2_8DAY_NDVI").select('NDVI').filterDate('1994-01-01', '1994-12-31')
DEHRADUNNDVI_1994 = NDVI1994.mean().clip(DEHRADUN)
DEHRADUNNDVI_1994 = DEHRADUNNDVI_1994.updateMask(DEHRADUNNDVI_1994.gt(0))
NDVI = {'min':0, 'max':1, 'palette': ['ffffff', 'ce7e45', 'df923d', 'f1b555', 'fcd163', '99b718', '74a901',
    '66a000', '529400', '3e8601', '207401', '056201', '004c00', '023b01',
    '012e01', '011d01', '011301']}
m.addLayer(DEHRADUNNDVI_1994, NDVI, 'NDVI_1994')
m

export_task = ee.batch.Export.image.toDrive(
    image=NDVI1994,
    description='NDVI1994',
    folder='EarthEngine',
    fileNamePrefix='NDVI1994',
    region=DEHRADUN.geometry().bounds().getInfo()['coordinates'],
    scale=30,  # Adjust the scale as needed
    maxPixels=1e13
)
export_task.start()

NDVI1989 = ee.ImageCollection("LANDSAT/COMPOSITES/C02/T1_L2_8DAY_NDVI").select('NDVI').filterDate('1989-01-01', '1989-12-31')
DEHRADUNNDVI_1989 = NDVI1989.mean().clip(DEHRADUN)
NDVI = {'min':0, 'max':1, 'palette': ['ffffff', 'ce7e45', 'df923d', 'f1b555', 'fcd163', '99b718', '74a901',
    '66a000', '529400', '3e8601', '207401', '056201', '004c00', '023b01',
    '012e01', '011d01', '011301']}
m.addLayer(DEHRADUNNDVI_1989, NDVI, 'NDVI_1989')
m

export_task = ee.batch.Export.image.toDrive(
    image=NDVI1989,
    description='NDVI1989',
    folder='EarthEngine',
    fileNamePrefix='NDVI1989',
    region=DEHRADUN.geometry().bounds().getInfo()['coordinates'],
    scale=30,  # Adjust the scale as needed
    maxPixels=1e13
)
export_task.start()

def calculate_NDWI24(image):
    green = image.select('SR_B3')
    nir = image.select('SR_B5')
    ndwi = green.subtract(nir).divide(green.add(nir)).rename('NDWI')
    return image.addBands(ndwi)
NDWI2024 = (
    ee.ImageCollection("LANDSAT/LC09/C02/T1_L2")
    .filterDate('2024-03-01', '2024-05-31')
    .filterBounds(DEHRADUN)
    .map(calculate_NDWI24)
)
DEHRADUNNDWI_2024 = NDWI2024.select('NDWI').mean().clip(DEHRADUN)
NDWI_viz = {'min': -1, 'max': 1, 'palette': [
        '#D73027',  # Red (Dry/Built-up)
        '#FC8D59',  # Orange (Barren Land)
        '#FEE08B',  # Yellow (Sparse Vegetation)
        '#D9EF8B',  # Light Green (Moist Soil)
        '#91CF60',  # Green (Vegetation)
        '#1A9850',  # Dark Green (Shallow Water)
        '#313695'   # Blue (Deep Water)
    ]}
m.addLayer(DEHRADUNNDWI_2024, NDWI_viz, 'NDWI_2024')
m

export_task = ee.batch.Export.image.toDrive(
    image=NDWI2024,
    description='NDWI2024',
    folder='EarthEngine',
    fileNamePrefix='NDWI2024',
    region=DEHRADUN.geometry().bounds().getInfo()['coordinates'],
    scale=30,  # Adjust the scale as needed
    maxPixels=1e13
)
export_task.start()

def calculate_NDWI14(image):
    green = image.select('SR_B3')
    nir = image.select('SR_B5')
    ndwi = green.subtract(nir).divide(green.add(nir)).rename('NDWI')
    return image.addBands(ndwi)
NDWI2014 = (
    ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
    .filterDate('2014-03-01', '2014-05-31')
    .filterBounds(DEHRADUN)
    .map(calculate_NDWI14)
)
DEHRADUNNDWI_2014 = NDWI2014.select('NDWI').mean().clip(DEHRADUN)
NDWI_viz = {'min': -1, 'max': 1, 'palette': [
        '#D73027',  # Red (Dry/Built-up)
        '#FC8D59',  # Orange (Barren Land)
        '#FEE08B',  # Yellow (Sparse Vegetation)
        '#D9EF8B',  # Light Green (Moist Soil)
        '#91CF60',  # Green (Vegetation)
        '#1A9850',  # Dark Green (Shallow Water)
        '#313695'   # Blue (Deep Water)
    ]}
m.addLayer(DEHRADUNNDWI_2014, NDWI_viz, 'NDWI_2014')
m

export_task = ee.batch.Export.image.toDrive(
    image=NDWI2014,
    description='NDWI2014',
    folder='EarthEngine',
    fileNamePrefix='NDVI2014',
    region=DEHRADUN.geometry().bounds().getInfo()['coordinates'],
    scale=30,  # Adjust the scale as needed
    maxPixels=1e13
)
export_task.start()

def calculate_NDWI04(image):
  # Get image band names
    band_names = image.bandNames().getInfo()

    # Check if necessary bands are present
    if 'SR_B2' in band_names and 'SR_B4' in band_names:
        green = image.select('SR_B2') # Indented this line by 4 spaces
        nir = image.select('SR_B4')   # Indented this line by 4 spaces
        ndwi = green.subtract(nir).divide(green.add(nir)).rename('NDWI') # Indented this line by 4 spaces
        return image.addBands(ndwi) # Indented this line by 4 spaces
NDWI2004 = (
    ee.ImageCollection("LANDSAT/LT05/C02/T1_L2")
    .filterDate('2004-01-01', '2004-12-31')
    .filterBounds(DEHRADUN)
    .map(calculate_NDWI04)
)
DEHRADUNNDWI_2004 = NDWI2004.select('NDWI').mean().clip(DEHRADUN)
NDWI_viz = {'min': -1, 'max': 1, 'palette': [
        '#D73027',  # Red (Dry/Built-up)
        '#FC8D59',  # Orange (Barren Land)
        '#FEE08B',  # Yellow (Sparse Vegetation)
        '#D9EF8B',  # Light Green (Moist Soil)
        '#91CF60',  # Green (Vegetation)
        '#1A9850',  # Dark Green (Shallow Water)
        '#313695'   # Blue (Deep Water)
    ]}
m.addLayer(DEHRADUNNDWI_2004, NDWI_viz, 'NDWI_2004')
m

export_task = ee.batch.Export.image.toDrive(
    image=NDVI1994,
    description='NDVI1994',
    folder='EarthEngine',
    fileNamePrefix='NDVI1994',
    region=DEHRADUN.geometry().bounds().getInfo()['coordinates'],
    scale=30,  # Adjust the scale as needed
    maxPixels=1e13
)
export_task.start()

def calculate_NDWI94(image):
    green = image.select('SR_B2')
    nir = image.select('SR_B4')
    ndwi = green.subtract(nir).divide(green.add(nir)).rename('NDWI')
    return image.addBands(ndwi)
NDWI1994 = (
    ee.ImageCollection("LANDSAT/LT05/C02/T1_L2")
    .filterDate('1994-01-01', '1994-12-31')
    .filterBounds(DEHRADUN)
    .map(calculate_NDWI94)
)
DEHRADUNNDWI_1994 = NDWI1994.select('NDWI').mean().clip(DEHRADUN)
NDWI_viz = {'min': -1, 'max': 1, 'palette': [
        '#D73027',  # Red (Dry/Built-up)
        '#FC8D59',  # Orange (Barren Land)
        '#FEE08B',  # Yellow (Sparse Vegetation)
        '#D9EF8B',  # Light Green (Moist Soil)
        '#91CF60',  # Green (Vegetation)
        '#1A9850',  # Dark Green (Shallow Water)
        '#313695'   # Blue (Deep Water)
    ]}
m.addLayer(DEHRADUNNDWI_1994, NDWI_viz, 'NDWI_1994')
m

export_task = ee.batch.Export.image.toDrive(
    image=NDWI1994,
    description='NDWI1994',
    folder='EarthEngine',
    fileNamePrefix='NDWI1994',
    region=DEHRADUN.geometry().bounds().getInfo()['coordinates'],
    scale=30,  # Adjust the scale as needed
    maxPixels=1e13
)
export_task.start()

def calculate_NDWI89(image):
    green = image.select('SR_B2')
    nir = image.select('SR_B4')
    ndwi = green.subtract(nir).divide(green.add(nir)).rename('NDWI')
      # Return the original image with the NDWI band added
    return image.addBands(ndwi)
NDWI1989 = (
    ee.ImageCollection("LANDSAT/LT05/C02/T1_L2")
    .filterDate('1989-01-01', '1989-12-31')
    .filterBounds(DEHRADUN)
    .map(calculate_NDWI89)
)
DEHRADUNNDWI_1989 = NDWI1989.select('NDWI').mean().clip(DEHRADUN)
NDWI_viz = {'min': -1, 'max': 1, 'palette': [
        '#D73027',  # Red (Dry/Built-up)
        '#FC8D59',  # Orange (Barren Land)
        '#FEE08B',  # Yellow (Sparse Vegetation)
        '#D9EF8B',  # Light Green (Moist Soil)
        '#91CF60',  # Green (Vegetation)
        '#1A9850',  # Dark Green (Shallow Water)
        '#313695'   # Blue (Deep Water)
    ]}
m.addLayer(DEHRADUNNDWI_1989, NDWI_viz, 'NDWI_1989')
m

export_task = ee.batch.Export.image.toDrive(
    image=NDWI1989,
    description='NDWI1989',
    folder='EarthEngine',
    fileNamePrefix='NDWI1989',
    region=DEHRADUN.geometry().bounds().getInfo()['coordinates'],
    scale=30,  # Adjust the scale as needed
    maxPixels=1e13
)
export_task.start()

def calculate_SAVI24(image):
    nir = image.select('SR_B5')  # Near-infrared band for Landsat 8
    red = image.select('SR_B4')  # Red band for Landsat 8
    L = 0.5  # Soil brightness correction factor (typically 0.5)

    savi = nir.subtract(red).multiply(1 + L).divide(nir.add(red).add(L)).rename('SAVI')

    # Return the original image with the SAVI band added
    return image.addBands(savi)

SAVI2024 = (
    ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
    .filterDate('2024-01-01', '2024-12-31')
    .filterBounds(DEHRADUN)
    .map(calculate_SAVI24)
)

DEHRADUNSAVI_2024 = SAVI2024.select('SAVI').mean().clip(DEHRADUN)

SAVI_viz = {
    'min': -1,  # Lower bound for SAVI values
    'max': 1,   # Upper bound for SAVI values
    'palette': [
        'brown',    # Barren land / soil
        'yellow',   # Sparse vegetation
        'lightgreen', # Moderate vegetation
        'green',    # Dense vegetation
        'darkgreen' # Very dense vegetation
    ]
}

m.addLayer(DEHRADUNSAVI_2024, SAVI_viz, 'SAVI_2024')
m

export_task = ee.batch.Export.image.toDrive(
    image=SAVI2024,
    description='SAVI2024',
    folder='EarthEngine',
    fileNamePrefix='SAVI2024',
    region=DEHRADUN.geometry().bounds().getInfo()['coordinates'],
    scale=30,  # Adjust the scale as needed
    maxPixels=1e13
)
export_task.start()

def calculate_SAVI14(image):
    nir = image.select('SR_B5')  # Near-infrared band for Landsat 8
    red = image.select('SR_B4')  # Red band for Landsat 8
    L = 0.5  # Soil brightness correction factor (typically 0.5)

    savi = nir.subtract(red).multiply(1 + L).divide(nir.add(red).add(L)).rename('SAVI')

    # Return the original image with the SAVI band added
    return image.addBands(savi)

SAVI2014 = (
    ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
    .filterDate('2014-01-01', '2014-12-31')
    .filterBounds(DEHRADUN)
    .map(calculate_SAVI14)
)

DEHRADUNSAVI_2014 = SAVI2014.select('SAVI').mean().clip(DEHRADUN)

SAVI_viz = {
    'min': -1,  # Lower bound for SAVI values
    'max': 1,   # Upper bound for SAVI values
    'palette': [
        'brown',    # Barren land / soil
        'yellow',   # Sparse vegetation
        'lightgreen', # Moderate vegetation
        'green',    # Dense vegetation
        'darkgreen' # Very dense vegetation
    ]
}

m.addLayer(DEHRADUNSAVI_2014, SAVI_viz, 'SAVI_2014')
m

export_task = ee.batch.Export.image.toDrive(
    image=SAVI2014,
    description='SAVI2014',
    folder='EarthEngine',
    fileNamePrefix='SAVI2014',
    region=DEHRADUN.geometry().bounds().getInfo()['coordinates'],
    scale=30,  # Adjust the scale as needed
    maxPixels=1e13
)
export_task.start()

def calculate_SAVI04(image):
    nir = image.select('SR_B4')  # Near-infrared band
    red = image.select('SR_B3')  # Red band
    L = 0.5  # Soil brightness correction factor (typical value is 0.5)

    savi = nir.subtract(red).multiply(1 + L).divide(nir.add(red).add(L)).rename('SAVI')

    # Return the original image with the SAVI band added
    return image.addBands(savi)

SAVI2004 = (
    ee.ImageCollection("LANDSAT/LT05/C02/T1_L2")
    .filterDate('2004-07-01', '2004-05-31')
    .filterBounds(DEHRADUN)
    .map(calculate_SAVI04)
)

DEHRADUNSAVI_2004 = SAVI2004.select('SAVI').mean().clip(DEHRADUN)

SAVI_viz = {
    'min': -1,  # Lower bound for SAVI values
    'max': 1,   # Upper bound for SAVI values
    'palette': [
        'brown',    # Barren land / soil
        'yellow',   # Sparse vegetation
        'lightgreen', # Moderate vegetation
        'green',    # Dense vegetation
        'darkgreen' # Very dense vegetation
    ]
}

m.addLayer(DEHRADUNSAVI_2004, SAVI_viz, 'SAVI_2004')
m

export_task = ee.batch.Export.image.toDrive(
    image=NDVI1994,
    description='NDVI1994',
    folder='EarthEngine',
    fileNamePrefix='NDVI1994',
    region=DEHRADUN.geometry().bounds().getInfo()['coordinates'],
    scale=30,  # Adjust the scale as needed
    maxPixels=1e13
)
export_task.start()

def calculate_SAVI94(image):
    nir = image.select('SR_B4')  # Near-infrared band
    red = image.select('SR_B3')  # Red band
    L = 0.5  # Soil brightness correction factor (typical value is 0.5)

    savi = nir.subtract(red).multiply(1 + L).divide(nir.add(red).add(L)).rename('SAVI')

    # Return the original image with the SAVI band added
    return image.addBands(savi)

SAVI1994 = (
    ee.ImageCollection("LANDSAT/LT05/C02/T1_L2")
    .filterDate('1994-03-01', '1994-05-31')
    .filterBounds(DEHRADUN)
    .map(calculate_SAVI94)
)

DEHRADUNSAVI_1994 = SAVI1994.select('SAVI').mean().clip(DEHRADUN)

SAVI_viz = {
    'min': -1,  # Lower bound for SAVI values
    'max': 1,   # Upper bound for SAVI values
    'palette': [
        'brown',    # Barren land / soil
        'yellow',   # Sparse vegetation
        'lightgreen', # Moderate vegetation
        'green',    # Dense vegetation
        'darkgreen' # Very dense vegetation
    ]
}

m.addLayer(DEHRADUNSAVI_1994, SAVI_viz, 'SAVI_1994')
m

export_task = ee.batch.Export.image.toDrive(
    image=NDWI1994,
    description='NDWI1994',
    folder='EarthEngine',
    fileNamePrefix='NDWI1994',
    region=DEHRADUN.geometry().bounds().getInfo()['coordinates'],
    scale=30,  # Adjust the scale as needed
    maxPixels=1e13
)
export_task.start()

def calculate_SAVI89(image):
    nir = image.select('SR_B4')  # Near-infrared band
    red = image.select('SR_B3')  # Red band
    L = 0.5  # Soil brightness correction factor (typical value is 0.5)

    savi = nir.subtract(red).multiply(1 + L).divide(nir.add(red).add(L)).rename('SAVI')

    # Return the original image with the SAVI band added
    return image.addBands(savi)

SAVI1989 = (
    ee.ImageCollection("LANDSAT/LT05/C02/T1_L2")
    .filterDate('1989-03-01', '1989-12-31')
    .filterBounds(DEHRADUN)
    .map(calculate_SAVI89)
)

DEHRADUNSAVI_1989 = SAVI1989.select('SAVI').mean().clip(DEHRADUN)

SAVI_viz = {
    'min': -1,  # Lower bound for SAVI values
    'max': 1,   # Upper bound for SAVI values
    'palette': [
        'brown',    # Barren land / soil
        'yellow',   # Sparse vegetation
        'lightgreen', # Moderate vegetation
        'green',    # Dense vegetation
        'darkgreen' # Very dense vegetation
    ]
}

m.addLayer(DEHRADUNSAVI_1989, SAVI_viz, 'SAVI_1989')
m

export_task = ee.batch.Export.image.toDrive(
    image=NDWI1989,
    description='NDWI1989',
    folder='EarthEngine',
    fileNamePrefix='NDWI1989',
    region=DEHRADUN.geometry().bounds().getInfo()['coordinates'],
    scale=30,  # Adjust the scale as needed
    maxPixels=1e13
)
export_task.start()

m.setCenter(78.486671, 17.385044, 10)

out_dir = 'Downloads'  # Use a directory that's accessible in the environment
filename_html = os.path.join(out_dir, 'NDVI_SAVI_NDWI_map.html')

# Create the directory if it doesn't exist
if not os.path.exists(out_dir):
    os.makedirs(out_dir)
m.save('/content/Downloads/NDVI_SAVI_NDWI_map.html')

from google.colab import files
files.download('/content/Downloads/NDVI_SAVI_NDWI_map.html')